// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Timesheet.Infrastructure.Persistence;

#nullable disable

namespace Timesheet.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(TimesheetDbContext))]
    [Migration("20221015174224_add-status-timesheetentry")]
    partial class addstatustimesheetentry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Timesheet.Domain.Models.Audits.Audit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PictureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrimaryApproverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondaryApproverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PictureId");

                    b.HasIndex("PrimaryApproverId");

                    b.HasIndex("SecondaryApproverId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.TimeoffEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimeoffHeaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TimeoffHeaderId");

                    b.ToTable("TimeoffEntry");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.TimeoffHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproverComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeoffHeader");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Holidays.Holiday", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRecurrent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Notifications.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Notifications.NotificationItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationItems");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Settings.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Timesheets.TimesheetEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTaskNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaborCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("OutOffCountry")
                        .HasColumnType("bit");

                    b.Property<string>("PayrollCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfitCenterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceOrderDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceOrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimesheetHeaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TimesheetHeaderId");

                    b.ToTable("TimesheetEntry");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Timesheets.TimesheetHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayrollPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.Employee", b =>
                {
                    b.HasOne("Timesheet.Domain.Models.Employees.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Timesheet.Domain.Models.Employees.Image", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("Timesheet.Domain.Models.Employees.Employee", "PrimaryApprover")
                        .WithMany()
                        .HasForeignKey("PrimaryApproverId");

                    b.HasOne("Timesheet.Domain.Models.Employees.Employee", "SecondaryApprover")
                        .WithMany()
                        .HasForeignKey("SecondaryApproverId");

                    b.OwnsOne("Timesheet.Domain.Models.Employees.EmployeeContactData", "Contacts", b1 =>
                        {
                            b1.Property<string>("EmployeeId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("CompanyEmail")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CompanyEmail");

                            b1.Property<string>("CompanyPhone")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CompanyPhone");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("Timesheet.Domain.Models.Employees.EmployeeEmploymentData", "EmploymentData", b1 =>
                        {
                            b1.Property<string>("EmployeeId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Department")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Department");

                            b1.Property<DateTime>("EmploymentDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EmploymentDate");

                            b1.Property<bool>("IsAdministrator")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsSalaried")
                                .HasColumnType("bit")
                                .HasColumnName("IsSalaried");

                            b1.Property<string>("JobTitle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("JobTitle");

                            b1.Property<DateTime?>("TerminationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("TerminationDate");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("EmploymentData")
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Picture");

                    b.Navigation("PrimaryApprover");

                    b.Navigation("SecondaryApprover");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.TimeoffEntry", b =>
                {
                    b.HasOne("Timesheet.Domain.Models.Employees.TimeoffHeader", null)
                        .WithMany("TimeoffEntries")
                        .HasForeignKey("TimeoffHeaderId");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.TimeoffHeader", b =>
                {
                    b.HasOne("Timesheet.Domain.Models.Employees.Employee", null)
                        .WithMany("Timeoffs")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Timesheets.TimesheetEntry", b =>
                {
                    b.HasOne("Timesheet.Domain.Models.Timesheets.TimesheetHeader", null)
                        .WithMany("TimesheetEntries")
                        .HasForeignKey("TimesheetHeaderId");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.Employee", b =>
                {
                    b.Navigation("Timeoffs");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Employees.TimeoffHeader", b =>
                {
                    b.Navigation("TimeoffEntries");
                });

            modelBuilder.Entity("Timesheet.Domain.Models.Timesheets.TimesheetHeader", b =>
                {
                    b.Navigation("TimesheetEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
