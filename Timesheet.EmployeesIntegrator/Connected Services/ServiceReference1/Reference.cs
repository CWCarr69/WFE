//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdus si
//     le code est regénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ServiceModel;

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.FPDTSWSSoap")]
    public interface FPDTSWSSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Transfer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TransferAsync(string FPDTSTransferName, string FPDTSInboundData, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GZipTransfer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GZipTransferAsync(string FPDTSTransferName, string FPDTSInboundData, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Transfer2FA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Transfer2FAAsync(string FPDTSTransferName, string FPDTSInboundData, string UserAuthenticationType, string AccessToken, string IDToken, string RefreshToken, string UserName2FA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GZipTransfer2FA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GZipTransfer2FAAsync(string FPDTSTransferName, string FPDTSInboundData, string UserAuthenticationType, string AccessToken, string RefreshToken, string IDToken, string UserName2FA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ConnectDelegate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ConnectDelegateAsync(string UserID, string Password, string DelegatedSessionUserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Connect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ConnectAsync(string UserID, string Password);
        
        // CODEGEN : Génération du contrat de message dans la mesure où l'opération compte plusieurs valeurs retournées.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ConnectUsingLDAPorFieldpointID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ConnectUsingLDAPorFieldpointIDResponse> ConnectUsingLDAPorFieldpointIDAsync(ServiceReference1.ConnectUsingLDAPorFieldpointIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Disconnect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsSessionActive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsSessionActiveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task SetUserAsync(string pstrUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/VerifySessionIsActive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task VerifySessionIsActiveAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConnectUsingLDAPorFieldpointID", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ConnectUsingLDAPorFieldpointIDRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string pstrLDAPorFieldpointUserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string pstrLDAPorFieldpointPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string pstrResolvedFieldpointUserID;
        
        public ConnectUsingLDAPorFieldpointIDRequest()
        {
        }
        
        public ConnectUsingLDAPorFieldpointIDRequest(string pstrLDAPorFieldpointUserID, string pstrLDAPorFieldpointPassword, string pstrResolvedFieldpointUserID)
        {
            this.pstrLDAPorFieldpointUserID = pstrLDAPorFieldpointUserID;
            this.pstrLDAPorFieldpointPassword = pstrLDAPorFieldpointPassword;
            this.pstrResolvedFieldpointUserID = pstrResolvedFieldpointUserID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConnectUsingLDAPorFieldpointIDResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ConnectUsingLDAPorFieldpointIDResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string pstrResolvedFieldpointUserID;
        
        public ConnectUsingLDAPorFieldpointIDResponse()
        {
        }
        
        public ConnectUsingLDAPorFieldpointIDResponse(string pstrResolvedFieldpointUserID)
        {
            this.pstrResolvedFieldpointUserID = pstrResolvedFieldpointUserID;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface FPDTSWSSoapChannel : ServiceReference1.FPDTSWSSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class FPDTSWSSoapClient : System.ServiceModel.ClientBase<ServiceReference1.FPDTSWSSoap>, ServiceReference1.FPDTSWSSoap
    {
        
        /// <summary>
        /// Implémentez cette méthode partielle pour configurer le point de terminaison de service.
        /// </summary>
        /// <param name="serviceEndpoint">Point de terminaison à configurer</param>
        /// <param name="clientCredentials">Informations d'identification du client</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FPDTSWSSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(FPDTSWSSoapClient.GetBindingForEndpoint(endpointConfiguration), FPDTSWSSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FPDTSWSSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FPDTSWSSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FPDTSWSSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FPDTSWSSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FPDTSWSSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> TransferAsync(string FPDTSTransferName, string FPDTSInboundData, string UserName, string Password)
        {
            return base.Channel.TransferAsync(FPDTSTransferName, FPDTSInboundData, UserName, Password);
        }
        
        public System.Threading.Tasks.Task<string> GZipTransferAsync(string FPDTSTransferName, string FPDTSInboundData, string UserName, string Password)
        {
            return base.Channel.GZipTransferAsync(FPDTSTransferName, FPDTSInboundData, UserName, Password);
        }
        
        public System.Threading.Tasks.Task<string> Transfer2FAAsync(string FPDTSTransferName, string FPDTSInboundData, string UserAuthenticationType, string AccessToken, string IDToken, string RefreshToken, string UserName2FA)
        {
            return base.Channel.Transfer2FAAsync(FPDTSTransferName, FPDTSInboundData, UserAuthenticationType, AccessToken, IDToken, RefreshToken, UserName2FA);
        }
        
        public System.Threading.Tasks.Task<string> GZipTransfer2FAAsync(string FPDTSTransferName, string FPDTSInboundData, string UserAuthenticationType, string AccessToken, string RefreshToken, string IDToken, string UserName2FA)
        {
            return base.Channel.GZipTransfer2FAAsync(FPDTSTransferName, FPDTSInboundData, UserAuthenticationType, AccessToken, RefreshToken, IDToken, UserName2FA);
        }
        
        public System.Threading.Tasks.Task ConnectDelegateAsync(string UserID, string Password, string DelegatedSessionUserName)
        {
            return base.Channel.ConnectDelegateAsync(UserID, Password, DelegatedSessionUserName);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string UserID, string Password)
        {
            return base.Channel.ConnectAsync(UserID, Password);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ConnectUsingLDAPorFieldpointIDResponse> ConnectUsingLDAPorFieldpointIDAsync(ServiceReference1.ConnectUsingLDAPorFieldpointIDRequest request)
        {
            return base.Channel.ConnectUsingLDAPorFieldpointIDAsync(request);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync()
        {
            return base.Channel.DisconnectAsync();
        }
        
        public System.Threading.Tasks.Task<bool> IsSessionActiveAsync()
        {
            return base.Channel.IsSessionActiveAsync();
        }
        
        public System.Threading.Tasks.Task SetUserAsync(string pstrUserID)
        {
            return base.Channel.SetUserAsync(pstrUserID);
        }
        
        public System.Threading.Tasks.Task VerifySessionIsActiveAsync()
        {
            return base.Channel.VerifySessionIsActiveAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            //if ((endpointConfiguration == EndpointConfiguration.FPDTSWSSoap))
            //{
            //    System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            //    result.MaxBufferSize = int.MaxValue;
            //    result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            //    result.MaxReceivedMessageSize = int.MaxValue;
            //    result.AllowCookies = true;
            //    result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
            //    return result;
            //}
            ////if ((endpointConfiguration == EndpointConfiguration.FPDTSWSSoap12))
            ////{
            //    System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
            //    System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
            //    textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
            //    result.Elements.Add(textBindingElement);
            //    System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
            //    //httpsBindingElement.AuthenticationScheme = System.Net.AuthenticationSchemes.Basic;
            //    httpsBindingElement.AllowCookies = true;
            //    httpsBindingElement.MaxBufferSize = int.MaxValue;
            //    httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
            //    result.Elements.Add(httpsBindingElement);

            //    return result;
            ////}

            var httpsBinding = new BasicHttpsBinding();
            httpsBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;
            httpsBinding.Security.Mode = BasicHttpsSecurityMode.Transport;

            var integerMaxValue = int.MaxValue;
            httpsBinding.MaxBufferSize = integerMaxValue;
            httpsBinding.MaxReceivedMessageSize = integerMaxValue;
            httpsBinding.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            httpsBinding.AllowCookies = true;

            //httpsBinding.ReceiveTimeout = timeout;
            //httpsBinding.SendTimeout = timeout;
            //httpsBinding.OpenTimeout = timeout;
            //httpsBinding.CloseTimeout = timeout;

            return httpsBinding;
            throw new System.InvalidOperationException(string.Format("Le point de terminaison nommé \'{0}\' est introuvable.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.FPDTSWSSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://wilsonfiredev.fieldpointonline.com/Services/FPDTSWS.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.FPDTSWSSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://wilsonfiredev.fieldpointonline.com/Services/FPDTSWS.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Le point de terminaison nommé \'{0}\' est introuvable.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            FPDTSWSSoap,
            
            FPDTSWSSoap12,
        }
    }
}
